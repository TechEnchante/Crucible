Crucible - Git for Life

### ❓ What is Crucible?

> “After being impacted by a RIF, I found myself disoriented—no roadmap, no daily standups, no sprint goals. Just silence.”

**Crucible** was born in that silence.

It’s not just an app. It’s a way to rebuild your sense of momentum—one commit, one quest at a time. It’s a fusion of **code-driven structure** and **adventure-style exploration**. Inspired by the commitment tracking of GitHub and the immersive grind of RuneScape quests, Crucible gives you:

- A **commit log** for your life  
- **AI‑powered quests** tailored to your real-world goals  
- A **vectorised memory system** that learns and grows with you  
- **Runes and events** to ground your goals in what matters most  

It’s about turning confusion into clarity. Burnout into experience points. And every day into a step toward purpose.
> This is your forge.  
> This is your Crucible.

-----------------------------------------------------------------

“Life as code” meets RuneScape‑style quests:
- Git‑like commits for real‑world tasks & achievements
- AI‑powered quests shaped by your history & the world around you
- Qdrant vector storage for semantic retrieval & history

🔧 Tech Stack
- **Backend**: Python 3.13+, FastAPI, Async OpenAI
- **Vector DB**: Qdrant
- **Frontend**: React 18, Tailwind CSS, shadcn/ui, Framer Motion
- **AI**: OpenAI embeddings & Chat completions for quest generation
- **Containers**: Docker & docker‑compose

🚀 Quick Start
1. Clone & configure:
   ```bash
   git clone https://github.com/TechEnchante/crucible.git
   cd crucible
   cp .env.example .env
   ```
2. Launch all services:
   ```bash
   docker-compose up --build
   ```
3. Backend:
   - OpenAPI UI: http://localhost:8000/docs
   - Health check: GET /health
4. Frontend:
   - Visit http://localhost:3000, click **Get Quest** or **New Commit**

🗂️ Architecture
```
[React UI] ←→ [FastAPI API] ←→ [Qdrant Vector DB]
                          ↕
                     [OpenAI API]
```
- Commits stored as vectors + metadata
- Quests and event templates indexed in Qdrant
- Quest assignment: semantic lookup → LLM prompt → personalized quest

⚙️ Configuration
Set in `.env`:
```ini
QDRANT_URL=http://qdrant:6333
OPENAI_API_KEY=sk-...
APP_NAME=Crucible
```

🧪 Testing
- **Backend**:
  ```bash
  cd backend
  pytest
  ```
- **Frontend**:
  ```bash
  cd frontend
  npm test
  ```

🤖 AI‑Powered Quest Engine
1. Embed last N commits with `all‑mpnet‑base‑v2`.
2. Query Qdrant for top‑k quest & event templates by similarity.
3. Prompt LLM:
   > “Given these past activities: …  
   > And these signals: [“Heavy rain forecast”, “Hackathon today”]  
   > Draft a quest that leverages both user achievements and these events.”
4. Return JSON quest:
   ```json
   {
     "quest_id": "...",
     "title": "Forge Your First Public Release",
     "description": "You’ve logged 5 ‘bugfix’ commits—now package version 1.0 and share it!",
     "xp_reward": 100
   }
   ```

📅 4‑Week Roadmap Summary
| Week | Focus                                                                                         |
|:----:|----------------------------------------------------------------------------------------------|
| 1    | Core engine + Docker + Qdrant + health & commit endpoints                                    |
| 2    | Commit storage, quest templates, `/quests/assign` AI integration                             |
| 3    | Event connectors (news, weather, calendar), guilds, branching timelines, plugin hooks        |
| 4    | UI animations (world arcs, seasonal narratives), end‑to‑end tests, docs, production deploy   |

🛠 Contributions
- Issues & PRs welcome!
- See `ROADMAP.md` for detailed sprint breakdown.

🎉 You’re all set to turn your life into an epic quest—welcome to **Crucible**!